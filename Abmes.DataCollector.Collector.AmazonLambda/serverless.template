{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application that uses the .NET runtime running in Amazon Lambda and Fargate, triggered by EventBridge schedule rules.",

  "Parameters": {
    "ProjectBaseName": {
      "Type": "String",
      "Description": "Project base name",
      "MinLength": "0"
    },
    "ProjectBaseNameLower": {
      "Type": "String",
      "Description": "Project base name in lower case",
      "MinLength": "0"
    },
    "OrganizationNameLower": {
      "Type": "String",
      "Description": "Orgaznization Name in lower case",
      "MinLength": "0"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC Id"
    },
    "ContainerSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of subnets for fargate container"
    },

    "ScheduleRule1BaseName": {
      "Type": "String",
      "Description": "Schedule rule 1 base name",
      "Default": ""
    },
    "ScheduleRule1ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 1 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule1Command": {
      "Type": "String",
      "Description": "Schedule rule 1 command",
      "Default": ""
    },

    "ScheduleRule2BaseName": {
      "Type": "String",
      "Description": "Schedule rule 2 base name",
      "Default": ""
    },
    "ScheduleRule2ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 2 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule2Command": {
      "Type": "String",
      "Description": "Schedule rule 2 command",
      "Default": ""
    },

    "ScheduleRule3BaseName": {
      "Type": "String",
      "Description": "Schedule rule 3 base name",
      "Default": ""
    },
    "ScheduleRule3ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 3 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule3Command": {
      "Type": "String",
      "Description": "Schedule rule 3 command",
      "Default": ""
    },

    "ConfigStorageType": {
      "Type": "String",
      "Description": "Amazon|Azure",
      "MinLength": "0"
    },
    "AmazonS3ConfigStorageBucketName": {
      "Type": "String",
      "Description": "S3 bucket name for config",
      "MinLength": "0"
    }
  },

  "Conditions": {
    "IsScheduleRule1BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule1BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule2BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule2BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule3BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule3BaseName" },
            ""
          ]
        }
      ]
    }
  },

  "Resources": {

    "TheFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": { "Fn::Sub": "${ProjectBaseName}Lambda" },
        "Handler": "Abmes.DataCollector.Collector.AmazonLambda::Abmes.DataCollector.Collector.AmazonLambda.Function::FunctionHandler",
        "Runtime": "dotnet6",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 900,
        "Role": null,
        "Policies": [
          "AmazonS3FullAccess"
        ],
        "Environment": {
          "Variables": {
            "AppSettings__ConfigStorageType": { "Ref": "ConfigStorageType" },
            "AppSettings__AmazonS3ConfigStorageBucketName": { "Ref": "AmazonS3ConfigStorageBucketName" }
          }
        },
        "Events": {}
      }
    },

    "TheContainerTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerTaskRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "ecs-tasks.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ]
      }
    },

    "TheContainerExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerExecutionRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "ecs-tasks.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ]
      }
    },

    "TheContainerEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerEventsRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "events.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"
        ]
      }
    },

    "TheContainerRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": { "Fn::Sub": "${OrganizationNameLower}/${ProjectBaseNameLower}containerrepository" }
      }
    },

    "TheContainerTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Fn::Sub": "${ProjectBaseName}ContainerTask" },
        "RequiresCompatibilities": [ "FARGATE" ],
        "Cpu": "1024",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "TaskRoleArn": { "Fn::Sub": "${TheContainerTaskRole.Arn}" },
        "ExecutionRoleArn": { "Fn::Sub": "${TheContainerExecutionRole.Arn}" },
        "ContainerDefinitions": [
          {
            "Name": { "Fn::Sub": "${ProjectBaseName}Container" },
            "Image": { "Fn::Sub": "${TheContainerRepository.RepositoryUri}:latest" },
            "Environment": [
              {
                "Name": "AppSettings__ConfigStorageType",
                "Value": { "Ref": "ConfigStorageType" }
              },
              {
                "Name": "AppSettings__AmazonS3ConfigStorageBucketName",
                "Value": { "Ref": "AmazonS3ConfigStorageBucketName" }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": { "Fn::Sub": "/ecs/${ProjectBaseName}Container" },
                "awslogs-region": { "Ref": "AWS::Region" },
                "awslogs-stream-prefix": "ecs"
              }
            },
            "Essential": true
          }
        ]
      }
    },

    "TheContainerCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Fn::Sub": "${ProjectBaseName}ContainerCluster" }
      }
    },

    "TheContainerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Sub": "${ProjectBaseName}Container Security Group" },
        "GroupName": { "Fn::Sub": "${ProjectBaseName}ContainerSecurityGroup" },
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound ipv4 traffic",
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "-1"
          },
          {
            "Description": "Allow all outbound ipv6 traffic",
            "CidrIpv6": "::/0",
            "IpProtocol": "-1"
          }
        ]
      }
    },

    "TheContainerScheduleRule1": {
      "Condition": "IsScheduleRule1BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-Container-${ScheduleRule1BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule1ScheduleExpression" },
        "Targets": [
          {
            "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
            "Id": "TheTargetId",
            "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
            "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule1Command}\"] } ] }" },
            "EcsParameters": {
              "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                  "Subnets": { "Ref": "ContainerSubnets" }
                }
              }
            }
          }
        ]
      }
    },

    "TheContainerScheduleRule2": {
      "Condition": "IsScheduleRule2BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-Container-${ScheduleRule2BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule2ScheduleExpression" },
        "Targets": [
          {
            "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
            "Id": "TheTargetId",
            "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
            "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule2Command}\"] } ] }" },
            "EcsParameters": {
              "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                  "Subnets": { "Ref": "ContainerSubnets" }
                }
              }
            }
          }
        ]
      }
    },

    "TheContainerScheduleRule3": {
      "Condition": "IsScheduleRule3BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-Container-${ScheduleRule3BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule3ScheduleExpression" },
        "Targets": [
          {
            "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
            "Id": "TheTargetId",
            "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
            "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule3Command}\"] } ] }" },
            "EcsParameters": {
              "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                  "Subnets": { "Ref": "ContainerSubnets" }
                }
              }
            }
          }
        ]
      }
    }
  },

  "Outputs": {}
}