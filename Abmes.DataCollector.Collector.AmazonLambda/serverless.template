{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "An AWS Serverless Application that uses the .NET runtime running in Amazon Lambda and Fargate, triggered by EventBridge schedule rules.",

  "Parameters": {
    "ProjectBaseName": {
      "Type": "String",
      "Description": "Project base name"
    },
    "ProjectBaseNameLower": {
      "Type": "String",
      "Description": "Project base name in lower case"
    },
    "OrganizationNameLower": {
      "Type": "String",
      "Description": "Orgaznization Name in lower case"
    },
    "ContainerVpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC Id"
    },
    "ContainerSubnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of subnets for fargate container"
    },
    "ShouldCreateLogGroups": {
      "Type": "String",
      "Description": "Should log groups be created. True when log groups do not exeist, False if log groups already exist",
      "AllowedValues": [ "False", "True" ]
    },
    "MetricsNamespace": {
      "Type": "String",
      "Description": "CloudWatch metrics namespace"
    },
    "AlarmsEmailAddress": {
      "Type": "String",
      "Description": "Email address to send alarm notifications to"
    },

    "ScheduleRule1BaseName": {
      "Type": "String",
      "Description": "Schedule rule 1 base name",
      "Default": ""
    },
    "ScheduleRule1ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 1 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule1Target": {
      "Type": "String",
      "Description": "Schedule rule 1 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule1ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 1 configSetName",
      "Default": ""
    },
    "ScheduleRule1DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 1 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule1CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 1 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule1TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 1 timeFilter",
      "Default": ""
    },

    "ScheduleRule2BaseName": {
      "Type": "String",
      "Description": "Schedule rule 2 base name",
      "Default": ""
    },
    "ScheduleRule2ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 2 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule2Target": {
      "Type": "String",
      "Description": "Schedule rule 2 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule2ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 2 configSetName",
      "Default": ""
    },
    "ScheduleRule2DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 2 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule2CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 2 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule2TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 2 timeFilter",
      "Default": ""
    },

    "ScheduleRule3BaseName": {
      "Type": "String",
      "Description": "Schedule rule 3 base name",
      "Default": ""
    },
    "ScheduleRule3ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 3 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule3Target": {
      "Type": "String",
      "Description": "Schedule rule 3 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule3ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 3 configSetName",
      "Default": ""
    },
    "ScheduleRule3DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 3 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule3CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 3 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule3TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 3 timeFilter",
      "Default": ""
    },

    "ScheduleRule4BaseName": {
      "Type": "String",
      "Description": "Schedule rule 4 base name",
      "Default": ""
    },
    "ScheduleRule4ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 4 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule4Target": {
      "Type": "String",
      "Description": "Schedule rule 4 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule4ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 4 configSetName",
      "Default": ""
    },
    "ScheduleRule4DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 4 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule4CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 4 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule4TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 4 timeFilter",
      "Default": ""
    },

    "ScheduleRule5BaseName": {
      "Type": "String",
      "Description": "Schedule rule 5 base name",
      "Default": ""
    },
    "ScheduleRule5ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 5 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule5Target": {
      "Type": "String",
      "Description": "Schedule rule 5 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule5ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 5 configSetName",
      "Default": ""
    },
    "ScheduleRule5DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 5 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule5CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 5 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule5TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 5 timeFilter",
      "Default": ""
    },

    "ScheduleRule6BaseName": {
      "Type": "String",
      "Description": "Schedule rule 6 base name",
      "Default": ""
    },
    "ScheduleRule6ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 6 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule6Target": {
      "Type": "String",
      "Description": "Schedule rule 6 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule6ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 6 configSetName",
      "Default": ""
    },
    "ScheduleRule6DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 6 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule6CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 6 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule6TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 6 timeFilter",
      "Default": ""
    },

    "ScheduleRule7BaseName": {
      "Type": "String",
      "Description": "Schedule rule 7 base name",
      "Default": ""
    },
    "ScheduleRule7ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 7 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule7Target": {
      "Type": "String",
      "Description": "Schedule rule 7 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule7ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 7 configSetName",
      "Default": ""
    },
    "ScheduleRule7DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 7 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule7CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 7 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule7TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 7 timeFilter",
      "Default": ""
    },

    "ScheduleRule8BaseName": {
      "Type": "String",
      "Description": "Schedule rule 8 base name",
      "Default": ""
    },
    "ScheduleRule8ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 8 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule8Target": {
      "Type": "String",
      "Description": "Schedule rule 8 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule8ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 8 configSetName",
      "Default": ""
    },
    "ScheduleRule8DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 8 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule8CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 8 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule8TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 8 timeFilter",
      "Default": ""
    },

    "ScheduleRule9BaseName": {
      "Type": "String",
      "Description": "Schedule rule 9 base name",
      "Default": ""
    },
    "ScheduleRule9ScheduleExpression": {
      "Type": "String",
      "Description": "Schedule rule 9 cron/rate expression",
      "Default": ""
    },
    "ScheduleRule9Target": {
      "Type": "String",
      "Description": "Schedule rule 9 target",
      "AllowedValues": [ "Lambda", "Container" ],
      "Default": "Lambda"
    },
    "ScheduleRule9ConfigSetName": {
      "Type": "String",
      "Description": "Schedule rule 9 configSetName",
      "Default": ""
    },
    "ScheduleRule9DataCollectionNames": {
      "Type": "String",
      "Description": "Schedule rule 9 dataCollectionNames",
      "Default": "*"
    },
    "ScheduleRule9CollectorMode": {
      "Type": "String",
      "Description": "Schedule rule 9 collectorMode",
      "Default": "collect"
    },
    "ScheduleRule9TimeFilter": {
      "Type": "String",
      "Description": "Schedule rule 9 timeFilter",
      "Default": ""
    },

    "ConfigStorageType": {
      "Type": "String",
      "Description": "Amazon|Azure"
    },
    "AmazonS3ConfigStorageBucketName": {
      "Type": "String",
      "Description": "S3 bucket name for config"
    }
  },

  "Conditions": {
    "IsLogGroupCreationNeeded": {
      "Fn::Equals": [
        { "Ref": "ShouldCreateLogGroups" },
        "True"
      ]
    },

    "IsScheduleRule1BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule1BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule1TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule1Target" },
        "Container"
      ]
    },

    "IsScheduleRule2BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule2BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule2TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule2Target" },
        "Container"
      ]
    },

    "IsScheduleRule3BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule3BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule3TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule3Target" },
        "Container"
      ]
    },

    "IsScheduleRule4BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule4BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule4TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule4Target" },
        "Container"
      ]
    },

    "IsScheduleRule5BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule5BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule5TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule5Target" },
        "Container"
      ]
    },

    "IsScheduleRule6BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule6BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule6TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule6Target" },
        "Container"
      ]
    },

    "IsScheduleRule7BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule7BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule7TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule7Target" },
        "Container"
      ]
    },

    "IsScheduleRule8BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule8BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule8TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule8Target" },
        "Container"
      ]
    },

    "IsScheduleRule9BaseNameNotEmpty": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ScheduleRule9BaseName" },
            ""
          ]
        }
      ]
    },
    "IsScheduleRule9TargetContainer": {
      "Fn::Equals": [
        { "Ref": "ScheduleRule9Target" },
        "Container"
      ]
    }

  },

  "Resources": {

    "TheLambdaLogGroup": {
      "Condition": "IsLogGroupCreationNeeded",
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
      }
    },

    "TheLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": { "Fn::Sub": "${ProjectBaseName}Lambda" },
        "Handler": "Abmes.DataCollector.Collector.AmazonLambda::Abmes.DataCollector.Collector.AmazonLambda.Function::FunctionHandler",
        "Runtime": "dotnet6",
        "CodeUri": "",
        "MemorySize": 512,
        "Timeout": 900,
        "Role": null,
        "Policies": [
          "AmazonS3FullAccess"
        ],
        "Environment": {
          "Variables": {
            "AppSettings__ConfigStorageType": { "Ref": "ConfigStorageType" },
            "AppSettings__AmazonS3ConfigStorageBucketName": { "Ref": "AmazonS3ConfigStorageBucketName" }
          }
        }
      }
    },

    "TheLambdaEventsPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "TheLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": { "Fn::Sub": "events.${AWS::URLSuffix}" },
        "SourceArn": { "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*" }
      }
    },

    "TheContainerTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerTaskRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "ecs-tasks.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        ]
      }
    },

    "TheContainerExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerExecutionRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "ecs-tasks.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/SecretsManagerReadWrite",
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ]
      }
    },

    "TheContainerEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${ProjectBaseName}ContainerEventsRole" },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ { "Fn::Sub": "events.${AWS::URLSuffix}" } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole"
        ]
      }
    },

    "TheContainerRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": { "Fn::Sub": "${OrganizationNameLower}/${ProjectBaseNameLower}-containerrepository" }
      }
    },

    "TheContainerLogGroup": {
      "Condition": "IsLogGroupCreationNeeded",
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
      }
    },

    "TheContainerTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": { "Fn::Sub": "${ProjectBaseName}ContainerTaskDefinition" },
        "RequiresCompatibilities": [ "FARGATE" ],
        "Cpu": "1024",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "TaskRoleArn": { "Fn::Sub": "${TheContainerTaskRole.Arn}" },
        "ExecutionRoleArn": { "Fn::Sub": "${TheContainerExecutionRole.Arn}" },
        "ContainerDefinitions": [
          {
            "Name": { "Fn::Sub": "${ProjectBaseName}Container" },
            "Image": { "Fn::Sub": "${TheContainerRepository.RepositoryUri}:latest" },
            "Environment": [
              {
                "Name": "AppSettings__ConfigStorageType",
                "Value": { "Ref": "ConfigStorageType" }
              },
              {
                "Name": "AppSettings__AmazonS3ConfigStorageBucketName",
                "Value": { "Ref": "AmazonS3ConfigStorageBucketName" }
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Fn::If": [
                    "IsLogGroupCreationNeeded",
                    { "Ref": "TheContainerLogGroup" },
                    { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
                  ]
                },
                "awslogs-region": { "Ref": "AWS::Region" },
                "awslogs-stream-prefix": "ecs"
              }
            },
            "Essential": true
          }
        ]
      }
    },

    "TheContainerCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Fn::Sub": "${ProjectBaseName}ContainerCluster" }
      }
    },

    "TheContainerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Sub": "${ProjectBaseName}Container Security Group" },
        "GroupName": { "Fn::Sub": "${ProjectBaseName}ContainerSecurityGroup" },
        "VpcId": { "Ref": "ContainerVpcId" },
        "SecurityGroupEgress": [
          {
            "Description": "Allow all outbound ipv4 traffic",
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "-1"
          },
          {
            "Description": "Allow all outbound ipv6 traffic",
            "CidrIpv6": "::/0",
            "IpProtocol": "-1"
          }
        ]
      }
    },


    "TheScheduleRule1": {
      "Condition": "IsScheduleRule1BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule1ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule1TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule1ConfigSetName}\", \"${ScheduleRule1DataCollectionNames}\", \"${ScheduleRule1CollectorMode}\", \"${ScheduleRule1TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule1ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule1DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule1CollectorMode}\", \"timeFilter\": \"${ScheduleRule1TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter1": {
      "Condition": "IsScheduleRule1BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule1ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule1TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic1": {
      "Condition": "IsScheduleRule1BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm1": {
      "Condition": "IsScheduleRule1BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule1Target}-${ScheduleRule1BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic1" } ]
      }
    },


    "TheScheduleRule2": {
      "Condition": "IsScheduleRule2BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule2ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule2TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule2ConfigSetName}\", \"${ScheduleRule2DataCollectionNames}\", \"${ScheduleRule2CollectorMode}\", \"${ScheduleRule2TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule2ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule2DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule2CollectorMode}\", \"timeFilter\": \"${ScheduleRule2TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter2": {
      "Condition": "IsScheduleRule2BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule2ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule2TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic2": {
      "Condition": "IsScheduleRule2BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm2": {
      "Condition": "IsScheduleRule2BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule2Target}-${ScheduleRule2BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic2" } ]
      }
    },


    "TheScheduleRule3": {
      "Condition": "IsScheduleRule3BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule3ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule3TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule3ConfigSetName}\", \"${ScheduleRule3DataCollectionNames}\", \"${ScheduleRule3CollectorMode}\", \"${ScheduleRule3TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule3ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule3DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule3CollectorMode}\", \"timeFilter\": \"${ScheduleRule3TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter3": {
      "Condition": "IsScheduleRule3BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule3ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule3TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic3": {
      "Condition": "IsScheduleRule3BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm3": {
      "Condition": "IsScheduleRule3BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule3Target}-${ScheduleRule3BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic3" } ]
      }
    },


    "TheScheduleRule4": {
      "Condition": "IsScheduleRule4BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule4ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule4TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule4ConfigSetName}\", \"${ScheduleRule4DataCollectionNames}\", \"${ScheduleRule4CollectorMode}\", \"${ScheduleRule4TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule4ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule4DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule4CollectorMode}\", \"timeFilter\": \"${ScheduleRule4TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter4": {
      "Condition": "IsScheduleRule4BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule4ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule4TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic4": {
      "Condition": "IsScheduleRule4BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm4": {
      "Condition": "IsScheduleRule4BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule4Target}-${ScheduleRule4BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic4" } ]
      }
    },


    "TheScheduleRule5": {
      "Condition": "IsScheduleRule5BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule5ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule5TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule5ConfigSetName}\", \"${ScheduleRule5DataCollectionNames}\", \"${ScheduleRule5CollectorMode}\", \"${ScheduleRule5TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule5ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule5DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule5CollectorMode}\", \"timeFilter\": \"${ScheduleRule5TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter5": {
      "Condition": "IsScheduleRule5BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule5ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule5TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic5": {
      "Condition": "IsScheduleRule5BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm5": {
      "Condition": "IsScheduleRule5BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule5Target}-${ScheduleRule5BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic5" } ]
      }
    },


    "TheScheduleRule6": {
      "Condition": "IsScheduleRule6BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule6ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule6TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule6ConfigSetName}\", \"${ScheduleRule6DataCollectionNames}\", \"${ScheduleRule6CollectorMode}\", \"${ScheduleRule6TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule6ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule6DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule6CollectorMode}\", \"timeFilter\": \"${ScheduleRule6TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter6": {
      "Condition": "IsScheduleRule6BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule6ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule6TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic6": {
      "Condition": "IsScheduleRule6BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm6": {
      "Condition": "IsScheduleRule6BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule6Target}-${ScheduleRule6BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic6" } ]
      }
    },


    "TheScheduleRule7": {
      "Condition": "IsScheduleRule7BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule7ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule7TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule7ConfigSetName}\", \"${ScheduleRule7DataCollectionNames}\", \"${ScheduleRule7CollectorMode}\", \"${ScheduleRule7TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule7ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule7DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule7CollectorMode}\", \"timeFilter\": \"${ScheduleRule7TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter7": {
      "Condition": "IsScheduleRule7BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule7ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule7TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic7": {
      "Condition": "IsScheduleRule7BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm7": {
      "Condition": "IsScheduleRule7BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule7Target}-${ScheduleRule7BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic7" } ]
      }
    },


    "TheScheduleRule8": {
      "Condition": "IsScheduleRule8BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule8ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule8TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule8ConfigSetName}\", \"${ScheduleRule8DataCollectionNames}\", \"${ScheduleRule8CollectorMode}\", \"${ScheduleRule8TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule8ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule8DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule8CollectorMode}\", \"timeFilter\": \"${ScheduleRule8TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter8": {
      "Condition": "IsScheduleRule8BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule8ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule8TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic8": {
      "Condition": "IsScheduleRule8BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm8": {
      "Condition": "IsScheduleRule8BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule8Target}-${ScheduleRule8BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic8" } ]
      }
    },


    "TheScheduleRule9": {
      "Condition": "IsScheduleRule9BaseNameNotEmpty",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Name": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-ScheduleRule" },
        "ScheduleExpression": { "Ref": "ScheduleRule9ScheduleExpression" },
        "Targets": [
          {
            "Fn::If": [
              "IsScheduleRule9TargetContainer",
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheContainerCluster.Arn}" },
                "RoleArn": { "Fn::Sub": "${TheContainerEventsRole.Arn}" },
                "Input": { "Fn::Sub": "{ \"containerOverrides\": [ { \"name\": \"${ProjectBaseName}Container\", \"command\": [\"${ScheduleRule9ConfigSetName}\", \"${ScheduleRule9DataCollectionNames}\", \"${ScheduleRule9CollectorMode}\", \"${ScheduleRule9TimeFilter}\"] } ] }" },
                "EcsParameters": {
                  "TaskDefinitionArn": { "Ref": "TheContainerTaskDefinition" },
                  "LaunchType": "FARGATE",
                  "NetworkConfiguration": {
                    "AwsVpcConfiguration": {
                      "AssignPublicIp": "ENABLED",
                      "SecurityGroups": [ { "Ref": "TheContainerSecurityGroup" } ],
                      "Subnets": { "Ref": "ContainerSubnets" }
                    }
                  }
                }
              },
              {
                "Id": "TheTargetId",
                "Arn": { "Fn::Sub": "${TheLambda.Arn}" },
                "Input": { "Fn::Sub": "{ \"configSetName\": \"${ScheduleRule9ConfigSetName}\", \"dataCollectionNames\": \"${ScheduleRule9DataCollectionNames}\", \"collectorMode\": \"${ScheduleRule9CollectorMode}\", \"timeFilter\": \"${ScheduleRule9TimeFilter}\" }" }
              }
            ]
          }
        ]
      }
    },

    "TheMetricFilter9": {
      "Condition": "IsScheduleRule9BaseNameNotEmpty",
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "FilterName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-Errors-MetricFilter" },
        "FilterPattern": { "Fn::Sub": "\"[${ScheduleRule9ConfigSetName}] ERRORS occured\"" },
        "LogGroupName": {
          "Fn::If": [
            "IsScheduleRule9TargetContainer",
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheContainerLogGroup" },
                { "Fn::Sub": "/ecs/${ProjectBaseName}Container" }
              ]
            },
            {
              "Fn::If": [
                "IsLogGroupCreationNeeded",
                { "Ref": "TheLambdaLogGroup" },
                { "Fn::Sub": "/aws/lambda/${ProjectBaseName}Lambda" }
              ]
            }
          ]
        },
        "MetricTransformations": [
          {
            "MetricNamespace": { "Ref": "MetricsNamespace" },
            "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-Errors-Metric" },
            "MetricValue": "1",
            "DefaultValue": 0
          }
        ]
      }
    },

    "TheAlarmSnsTopic9": {
      "Condition": "IsScheduleRule9BaseNameNotEmpty",
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-Errors-AlarmTopic" },
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "AlarmsEmailAddress" }
          }
        ]
      }
    },

    "TheAlarm9": {
      "Condition": "IsScheduleRule9BaseNameNotEmpty",
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-Errors-Alarm" },
        "Namespace": { "Ref": "MetricsNamespace" },
        "MetricName": { "Fn::Sub": "${ProjectBaseName}-${ScheduleRule9Target}-${ScheduleRule9BaseName}-Errors-Metric" },
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "DatapointsToAlarm": 1,
        "ComparisonOperator": "GreaterThanThreshold",
        "Threshold": 0,
        "TreatMissingData": "ignore",
        "AlarmActions": [ { "Ref": "TheAlarmSnsTopic9" } ]
      }
    }

  },

  "Outputs": {}
}